#version 460

#ifndef LOCAL_SIZE_COMMON
#define LOCAL_SIZE_COMMON 1024
#endif
layout(local_size_x = LOCAL_SIZE_COMMON) in;


const int kGridUboBinding = 1;

const int kPointsInBinding = 2;
const int kPointsOutBinding = 3;
const int kCountBinding = 4;
const int kStartBinding = 5;
const int kVoxelConstraintsBinding = 7;



const float eps = 1e-9;
layout(location = 0) uniform int uMode=5; 
layout(location = 2) uniform ivec3 uGridStride = ivec3(8,1,1); // this should be 8 for 3D, 4 for 2D
layout(location = 11) uniform float uAlpha = 0.75;
layout(location = 12) uniform float uAlphaLen = 0.0;

layout (std140, binding = kGridUboBinding) uniform DESTRUCTIVE_SYSTEM_DATA
{
    int numParticles;
    int numCells;
    vec3 gridMin;
    vec3 gridMax;
    ivec3 gridRes;
	vec3 cellSize;
    int maxCellsPerElement;
    vec4 wallConstraints[6];
    vec4 g;
    float dt;
    float c;
    float omega_collision; // collision stiffness
	float Time;
} systemUBO;



//TODO clean up
const int MODE_CONSTRAINT_GRID = 5;




struct XpbdParticle
{
   vec4 xpos;	//xpos.w == radius
   vec4 xprev;	//xprev.w == w (1.0/mass);
   vec4 vel;	//vel.w = mu (coefficent of friction)
   uvec4 flags; //flags.y = lod, flags.z = type, flags.w = rgba8 color
};



layout (std430, binding = kPointsInBinding) restrict buffer PARTICLES_INOUT
{
	XpbdParticle particles[];
};


uniform int selectPattern = 0;
uniform float PatternParam = 0.0;

void main()
{
	int gid = int(gl_GlobalInvocationID.x);
	if(gid >= systemUBO.numParticles)
		return;
	XpbdParticle pi = particles[gid];
	if(selectPattern==0){// select none
		return;
	}
	if(selectPattern==1){// select by distance between X plane
		if(abs(pi.xpos.x-PatternParam)<PatternParam)
			return;
		pi.xprev.w = 0.0;// static
		particles[gid] = pi;
	}
	if(selectPattern==2){// select by distance between Y plane
		if(abs(pi.xpos.y-PatternParam)<PatternParam)
			return;
		pi.xprev.w = 0.0;// static
		particles[gid] = pi;
	}

}






